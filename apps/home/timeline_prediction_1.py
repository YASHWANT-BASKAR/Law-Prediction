# -*- coding: utf-8 -*-
"""Timeline prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1afto_EBGMlBPDI2aST66W_spgN8860sN
"""

!pip install transformers

from google.colab import files
files.upload()

import pandas as pd
a=pd.read_csv("timeline.csv",encoding= 'unicode_escape')

a.head()

a.drop(a.columns[[2,3, 4]], axis=1, inplace=True)

a.head()

dict = {'For the balance due on a mutual, open and current account, where there have been recipro­cal demands between the par­ties.':'text','Three years':'time'}
 
# call rename () method
a.rename(columns=dict,inplace=True)

a.head()


pip install -U sentence-transformers

from sentence_transformers import SentenceTransformer, util
model = SentenceTransformer('sentence-transformers/multi-qa-mpnet-base-dot-v1')

!pip install word2number

docs=[]
for i in a.text:
  docs.append(i)
doc_emb = model.encode(docs)

import numpy as np
np.save("docemb.npy",doc_emb)

query = "to a High Court from any decree or order;"
query_emb = model.encode(query)

from word2number import w2n
scores = util.dot_score(query_emb, doc_emb)[0].cpu().tolist()
doc_score_pairs = list(zip(docs, scores))
doc_score_pairs = sorted(doc_score_pairs, key=lambda x: x[1], reverse=True)

#Output passages & scores
for doc, score in doc_score_pairs:
    print(score, doc)
    for i in range(len(a)):
      if a.text[i]==doc:
        b=a.time[i].split()
        res = w2n.word_to_num(b[0]) 
        print(res,b[1])

    break

